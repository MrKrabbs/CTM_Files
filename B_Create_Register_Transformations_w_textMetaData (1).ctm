<?xml version="1.0" encoding="UTF-16"?>
<Task schemaVersion="7.2">

    <Registration>
        <Name>Create New Variables</Name>
        <Description>The Transpose Data task transposes selected columns of an input table into the rows of an output table.</Description>
        <GUID>A7145660-NAVY-4E48-8AB4-B7AB34589911</GUID>
        <Procedures>TRANSPOSE</Procedures>
        <Version>5.2</Version>
        <Links>
            <Link href="http://documentation.sas.com/?softwareId=STUDIOBASIC&amp;softwareVersion=5.2&amp;softwareContextId=tasks&amp;requestor=inapp">SAS Studio Task Reference Guide</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
			 <Link href="http://documentation.sas.com/?softwareId=MVADOC&amp;softwareVersion=5.2_9.4&amp;softwareContextId=proc_transpose&amp;requestor=inapp">The TRANSPOSE Procedure</Link>
            <Link href=""> </Link>
            <Link href=""> </Link>
            <Link href="http://support.sas.com/training/studio">SAS Tutorials</Link>
        </Links>
    </Registration>

    <Metadata>
        <DataSources>
			 <DataSource name="startds" where="true">
                <Roles>
                    <Role  maxVars="1" minVars="1" name="startdummyvar" order="true" type="C">Package to update:</Role>
                </Roles>
            </DataSource>
            <DataSource name="dataset" defaultValue="WORK.SOURCE_VARIABLES" readOnly="true" where="false">
                <Roles>
                    <Role exclude="idVariable,idLabelVariable" maxVars="0" minVars="1" name="transposeVariables" order="true" type="A">Variables used in transformation:</Role>
                    <Role indent="1" maxVars="0" minVars="0" name="copyVariables" order="true" type="A">Copy to output data set:</Role>
                    <Role exclude="transposeVariables, byVariables, idLabelVariable" indent="1" maxVars="1" minVars="1" name="idVariable" order="true" type="A">New column names:</Role>
                    <Role exclude="transposeVariables, byVariables, idVariable" indent="1" maxVars="1" minVars="1" name="idLabelVariable" order="true" type="A">New column labels:</Role>
                    <Role exclude="idVariable, idLabelVariable" maxVars="0" minVars="0" name="byVariables" order="true" type="A">Group analysis by:</Role>
                </Roles>
            </DataSource>
			<DataSource name="TRANSFORM_VARS" defaultValue="WORK.PGM_META_DATA" active="true">
		<!--		<Roles>
					<Role type="A" maxVars="0" order="true" minVars="0" name="VAR">Choose a column to retrieve values for:</Role>
				</Roles> -->
				<Filters>
					<Filter name="filterTransform">
						<Column column="CallingPackage_Function"/>
<Where>
<Expressions>
<Expression operator="in">
<Column column="CallingPackage_Function"/>
<Value value="SUBSTR(CallingPackage_Function,5,5) ne = 'START'"/>
</Expression>
</Expressions>
</Where>
					</Filter>
				</Filters>
			</DataSource>
            <DataSource name="packageds" defaultValue="WORK.PACKAGE_SELECTED" readOnly="true" where="false">
                <Roles>
                    <Role  maxVars="1" minVars="1" name="packageupdate" order="true" type="C">Package to update:</Role>
<!--   					<Role  maxVars="0" minVars="0" name="packagestoleverage" order="true" type="C">Packages to leverage:</Role> -->
                </Roles>
            </DataSource>
        </DataSources>

        <Options>
            <Option inputType="string" name="dataTab">Select DATA Source</Option>
            <Option inputType="string" name="dataGroup">DATA</Option>
            <Option inputType="string" name="rolesGroup">ROLES</Option>
            <Option inputType="string" name="otherRolesGroup">ADDITIONAL ROLES</Option>

            <Option inputType="string" name="optionsTab">Create New Variables</Option>

            <Option defaultValue="0" indent="1" inputType="checkbox" name="allowDuplicates">Allow duplicates of ID values</Option>

            <Option inputType="string" name="transposedVarNamesGroup">NAMES AND LABELS OF TRANSPOSED VARIABLES</Option>
            <Option inputType="string" name="transposedVarNamesNote">Construct New Variable Names</Option>
            <Option defaultValue="1" inputType="checkbox" name="usePrefix">Use prefix</Option>
            <Option defaultValue="Column" indent="1" inputType="validationtext" invalidMessage="Enter a valid SAS variable name" missingMessage="Enter a valid SAS variable name" name="prefix" regExp=".{1,30}" required="true" width="200px">Prefix:</Option>
            <Option defaultValue="0" inputType="checkbox" name="testwithsource">Test code using (only) the source table for your model ?</Option>
            <Option inputType="string" name="transposedVarLabelsNote">Construct New Variable Labels</Option>
            <Option defaultValue="0" inputType="checkbox" name="ActivateBuild">Enable variable build:Check only after running code !</Option>

            <Option inputType="string" name="originalVarNamesGroup">NAMES AND LABELS OF ORIGINAL VARIABLES</Option>
			<Option inputType="string" name="new"></Option>
            <Option defaultValue="0" inputType="checkbox" name="useNameVarname">Put original variable names in a new variable</Option>
            <Option defaultValue="0" inputType="checkbox" name="useLabelVarname">Put original variable labels in a new variable</Option>
<!-- New SAS variable name: check against input data set -->
            <Option defaultValue="_Name_" indent="1" inputType="validationtext" invalidMessage="Enter a valid SAS variable name to hold the original variable names" missingMessage="Enter a valid SAS variable name to hold the original variable names" name="nameVarname" regExp=".{1,32}" required="true" width="200px">Name:</Option>
<!-- New SAS variable name: check against input data set -->
            <Option defaultValue="_Label_" indent="1" inputType="validationtext" invalidMessage="Enter a valid SAS variable name to hold the original variable labels" missingMessage="Enter a valid SAS variable name to hold the original variable labels" name="labelVarname" regExp=".{1,32}" required="true" width="203px">Label:</Option>

            <Option inputType="string" name="outputGroup">OUTPUT DATA SET</Option>
			<Option inputType="dualselector" name="comboTransformVar"  filter="filterTransform" >Select a car make:</Option> 
			<Option name="selectEXAMPLE" inputType="select" filter="filterTransform" multiple="true">Select:</Option>
            

            <Option defaultValue="work.Transpose" inputType="outputdata" name="outDsname" required="true" unique="true">Data set name:</Option>
            <Option inputType="string" name="showDataGroup">Output Data</Option>
            <Option defaultValue="0" inputType="checkbox" name="showData">Print output data</Option>
            <Option defaultValue="showSubsetDataChoice" inputType="combobox" name="showDataCombo"/>
            <Option inputType="string" name="showSubsetDataChoice">Specify subset of data to print</Option>
            <Option inputType="string" name="showAllDataChoice">All</Option>
            <Option decimalPlaces="0" defaultValue="10" increment="1" indent="1" inputType="numstepper" invalidMessage="Enter an integer greater than 0 for the number of observations to be shown" minValue="1" missingMessage="Enter an integer greater than 0 for the number of observations to be shown" name="subsetNobs" promptMessage="Enter an integer greater than 0 for the number of observations to be shown" rangeMessage="Enter an integer greater than 0 for the number of observations to be shown" required="true" width="100px">Number of observations:</Option>

            <Option inputType="string" name="subsetTitle">Subset of {1}</Option>
			<Option defaultValue="" inputType="inputtext" missingMessage="Missing an output variable." name="textOUTPUT" width="300px" promptMessage="Enter variable output name." required="true">Name of transformation output variable:</Option>
			<Option defaultValue="Replace This Text" inputType="inputtext" missingMessage="Missing label for your output variable." name="textLABEL" width="600px" promptMessage="Enter label for your output name." required="true">Label for your newly created variable:</Option>
			<Option name="textCode" required="true" inputType="textbox" width="100%" height="300px" splitLines="false"   defaultValue="/* Put Code Here*/">Code Window</Option>
	<!--		<Option defaultValue="1" inputType="radio" name="radioExternalVarNo" variable="radioIncludeVars">Include Variables from other models</Option>
			<Option inputType="radio" name="radioExternalVarYes" variable="radioIncludeVars">Exclude Variables from other models</Option> -->
			<Option defaultValue="0" inputType="checkbox" name="chkCreateDropDowns">Populate Drop Downs</Option>
			<Option defaultValue="0" inputType="checkbox" name="chkIncludeVars">Include Variables from other models</Option>
			<Option defaultValue="Put Variable Name here" inputType="validationtext" width="300px" invalidMessage="Invalid value.You must specify a string of 28 or less characters made up of alphanumeric and underscores" name="validationVarName" promptMessage="Enter a string 1-28 characters long." regExp="\S{1,28}">Variable Name:</Option>
			<Option defaultValue="Put label here" inputType="validationtext" width="600px" invalidMessage="Invalid value.You must specify a string of 256 or less characters" name="validationLabel" promptMessage="Enter a string 1-256 characters long." regExp=".{1,256}">Variable Label (up to 256):</Option>
			<Option defaultValue="1" inputType="radio" name="radioButtonTest" variable="radioAction">I want to test my code</Option>
			<Option inputType="radio" name="radioButtonStage" variable="radioAction">I want to Register transform and Stage my code for GitHub</Option>
			<Option inputType="radio" name="radioButtonCommit" variable="radioAction">I want to Register transform and Commit my code for GitHub</Option>
			<Option inputType="markdown" name="markdownPurpose">
# **Purpose of this Task**
Here you will create new variables one at a time. After you build and run the code to create your new variable you will discard this task template and open a new template to build additional variables
</Option>  
			<Option inputType="markdown" name="markdownStep1">
**Step 1:** Select variables that will be used to create your new variable
</Option>
			<Option inputType="markdown" name="markdownStep2">
**Step 2:** Select the model that will leverage your new variable
</Option>
			<Option inputType="markdown" name="markdownStep3">
**Step 3:** Give a name to your new variable, must follow SAS naming convention and a maximum length of 28 characters
</Option>
			<Option inputType="markdown" name="markdownStep4">
**Step 4:** Provide a label for your new variable. Need not follow SAS naming convention, however, maximum length is 256 characters
</Option>
			<Option inputType="markdown" name="markdownStep5">
**Step 5:** Enter valid SAS syntax in window below. Then Test, Stage or Commit your code
</Option>
			<Option inputType="markdown" name="markdownCompletion">
# **Upon successful completion**
Discard this template by closing and NOT saving
</Option>
			</Options>
    </Metadata>

        <UI>

           <Container option="optionsTab">
			<OptionItem option="markdownPurpose"/>
 <Group open="true" option="rolesGroup">
					<DataItem data="dataset"/>
					<OptionItem option="markdownStep1"/> 
                    <RoleItem role="transposeVariables"/>
  					<DataItem data="packageds"/>
					<OptionItem option="markdownStep2"/>
					<RoleItem role="packageupdate"/>
		<!--			<OptionItem option="textOUTPUT"/> -->
					<OptionItem option="markdownStep3"/>
					<OptionItem option="validationVarName"/>
					<OptionItem option="markdownStep4"/>
					<OptionItem option="validationLabel"/>
			<!--		<OptionItem option="textLABEL"/> -->
					<OptionItem option="markdownStep5"/>
					<OptionItem option="radioButtonTest"/>
					<OptionItem option="radioButtonStage"/>
					<OptionItem option="radioButtonCommit"/>
			<!--		<OptionItem option="testwithsource"/> -->
					<OptionItem option="textCode"/>
					<OptionItem option="markdownCompletion"/>
					<OptionItem option="new"/>
  			<!--		<OptionChoice option="comboTransformVar"/>
					<OptionChoice option="selectEXAMPLE"/>
			<OptionItem option="comboTransformVar"/>  -->
			

			<!--	<OptionItem option="chkCreateDropDowns"/> -->
                </Group>
            <!--     <Group open="true" option="transposedVarNamesGroup">
                    <Group open="true" option="transposedVarNamesNote">
                    <OptionItem option="usePrefix"/>
                        <OptionItem option="prefix"/>
                    <OptionItem option="useIdVar"/>
                    <RoleItem role="idVariable"/>
                    <OptionItem option="allowDuplicates"/>
                </Group>
                    <Group option="transposedVarLabelsNote">
                    <OptionItem option="useIdLabelVar"/>
                    <RoleItem role="idLabelVariable"/>
                </Group>
                </Group>
                <Group option="originalVarNamesGroup">
                    <OptionItem option="useNameVarname"/>
                    <OptionItem option="nameVarname"/>
                    <OptionItem option="useLabelVarname"/>
                    <OptionItem option="labelVarname"/>
                </Group>  -->

            </Container>
        </UI>

    <Dependencies>

      <!--	<Dependency condition="($ActivateBuild == '1')">
            <Target action="hide" conditionResult="false" option="optionsTab"/>
            <Target action="show" conditionResult="true" option="optionsTab"/>
         <Target action="disable" conditionResult="false" option="rolesGroup"/>
            <Target action="enable" conditionResult="true" option="rolesGroup"/> 
        </Dependency> -->
  <!--      <Dependency condition="$usePrefix &amp;&amp; $usePrefix == '1' || !$usePrefix">
            <Target action="show" conditionResult="true" option="prefix"/>
            <Target action="hide" conditionResult="false" option="prefix"/>
        </Dependency>
        <Dependency condition="$useIdVar &amp;&amp; $useIdVar == '1' || !$useIdVar">
            <Target action="show" conditionResult="true" option="idVariable"/>
            <Target action="hide" conditionResult="false" option="idVariable"/>
            <Target action="show" conditionResult="true" option="allowDuplicates"/>
            <Target action="hide" conditionResult="false" option="allowDuplicates"/>
        </Dependency>
        <Dependency condition="$useIdLabelVar &amp;&amp; $useIdLabelVar == '1' || !$useIdLabelVar">
            <Target action="show" conditionResult="true" option="idLabelVariable"/>
            <Target action="hide" conditionResult="false" option="idLabelVariable"/>
        </Dependency>
        <Dependency condition="$useNameVarname &amp;&amp; $useNameVarname == '1' || !$useNameVarname">
            <Target action="show" conditionResult="true" option="nameVarname"/>
            <Target action="hide" conditionResult="false" option="nameVarname"/>
        </Dependency>
        <Dependency condition="$useLabelVarname &amp;&amp; $useLabelVarname == '1' || !$useLabelVarname">
            <Target action="show" conditionResult="true" option="labelVarname"/>
            <Target action="hide" conditionResult="false" option="labelVarname"/>
        </Dependency>
        <Dependency condition="($showData == '1')">
            <Target action="show" conditionResult="true" option="showDataCombo"/>
            <Target action="hide" conditionResult="false" option="showDataCombo"/>
        </Dependency>
        <Dependency condition="($showData == '1' &amp;&amp; $showDataCombo == 'showSubsetDataChoice')">
            <Target action="show" conditionResult="true" option="subsetNobs"/>
            <Target action="hide" conditionResult="false" option="subsetNobs"/>
        </Dependency> -->
    </Dependencies>

    <Requirements>
     <!--   <Requirement condition="!(             $useNameVarname == '1' &amp;&amp;             $useLabelVarname == '1' &amp;&amp;             $nameVarname.equalsIgnoreCase( $labelVarname ) )">
            <Message>The names for the SAS variables to hold the original variable names and labels cannot be the same.</Message>
        </Requirement>
        <Requirement condition="!(             $useNameVarname == '1' &amp;&amp;             $dataset.columnExists($nameVarname)             )">
            <Message>The specified name of the SAS variable to hold the original variable names is already in use in the data set.</Message>
        </Requirement>
        <Requirement condition="!(             $useLabelVarname == '1' &amp;&amp;             $dataset.columnExists($labelVarname)             )">
            <Message>The specified name of the SAS variable to hold the original variable labels is already in use in the data set.</Message>
        </Requirement> -->
    </Requirements>

    <CodeTemplate>
        <![CDATA[

##proc printto log="&MyLog.";run;


#if ($radioAction == 'radioButtonTest')
OPTIONS VARINITCHK=ERROR;
/* $validationVarName.toUpperCase() = #foreach($item in $transposeVariables)$item.get("value") #end */
data work.test;
set WORK.SOURCE_VARIABLES(obs=0);
$textCode;
run;
#end

#if (!($radioAction == 'radioButtonTest'))

data work.one_transform_A;
Length CallingPackage_Function InPutVariable User_Analyst $32.;
Length Calling_Package Source_Package $3.;
Length Entry_time_number 8.;
Length Entry_time_text $19.;

User_Analyst="&sysuserid.";
Entry_time_number = DATETIME();
Entry_time_text = put(Entry_time_number,DATETIME19.);
FORMAT Entry_time_number DATETIME19.;

Source_Package='   ';
Calling_Package = '#foreach($item in $packageupdate)$item'#end;
CallingPackage_Function = '#foreach($item in $packageupdate)$item.#end$validationVarName.toUpperCase()';
#foreach($item in $transposeVariables)InPutVariable ='$item.get("value")';output;#end
run;

/* The code above will create the table like  below  */
/* Obs	CallingPackage_Function	InPutVariable	User_Analyst	Calling_Package	Source_Package	Entry_time_number	Entry_time_text */
/* 1	PRC.APRIL21_VAR1		discount		sasdemo			PRC	 							21APR2021:11:58:23	21APR2021:11:58:23 */
/* 2	PRC.APRIL21_VAR1		price			sasdemo			PRC	 							21APR2021:11:58:23	21APR2021:11:58:23 */

data work.one_transform_B;
Retain InPutVariable CallingPackage_Function Calling_Package Source_Package User_Analyst Entry_time_number Entry_time_text;
set work.one_transform_A;
	if countw(InPutVariable, '.') > 1 then
		do;
			Source_Package=upcase(scan(InputVariable, 1, "."));
		end;
	else
		do;
			Source_Package=Calling_Package;
			InputVariable=cats(Calling_Package, ".", InputVariable);
		end;
InputVariable = upcase(InputVariable);
run;

/* The code above will create the table like  below  */
/* Obs	InPutVariable	CallingPackage_Function	Calling_Package	Source_Package	User_Analyst	Entry_time_number	Entry_time_text */
/* 1	PRC.DISCOUNT	PRC.APRIL21_VAR1		PRC				PRC				sasdemo			21APR2021:11:58:23	21APR2021:11:58:23 */
/* 2	PRC.PRICE		PRC.APRIL21_VAR1		PRC				PRC				sasdemo			21APR2021:11:58:23	21APR2021:11:58:23 */


%let rec_count=0;%let check_to_see_if_this_var_exist = ;%let does_transform_exist =;%let check_good_table=;
Proc sql;
select count(*) into :rec_count from work.one_transform_B;
select DISTINCT(CallingPackage_Function) into:check_to_see_if_this_var_exist from work.one_transform_B;
select count(*) into :does_transform_exist from WORK.PGM_Meta_Data where CallingPackage_Function = "&check_to_see_if_this_var_exist.";
quit;

%append_check ;

%if &check_good_table. > 0 %then %do; /* Only if everything has gone without error then execute the code below */

/* We have to rebuild the drop downs immediately as the analyst might continue to work on the same model (package). Example: Might have just created a variable called Credit_1*/
/* They might immediately create a new variable that leverages the Credit_1 variable, that is why we recreate the drop downs at this time */
%BUILD_VAR_DROP_DOWNS_USING_PGM;

filename mytext "&GitLocation.Git_#foreach($item in $packageupdate)$item#end/${validationVarName.toUpperCase()}.sas";
data _null_;

file mytext;

infile cards4;

input;

put _infile_;

cards4;


$textCode;
LABEL $validationVarName.toUpperCase() = '$validationLabel';
##/* below are the four quotes*/
;;;;

data _null_;
 rc= git_index_add(
  "&GitLocation.Git_#foreach($item in $packageupdate)$item#end",
  "${validationVarName.toUpperCase()}.sas",
  "new");
run;
##proc printto;

%end;
#end


#if ($radioAction == 'radioButtonCommit')
%if &check_good_table. > 0 %then %do; /* Only if everything has gone without error then execute the code below */
data _null_;
	rc= git_commit(
		"&GitLocation.Git_#foreach($item in $packageupdate)$item#end",											/*Local repo:*/ 
		"HEAD",   											/* Branch, or technically it's the "update reference" that you want to commit to */
		"&sysuserid. (via SAS code)", 						/*Your name:*/
		"SASStudio@SASStudio.com", 								/*Your email:*/
		"SAS Studio commited on my behalf");					/*Commit message:*/
run;
%end;

#end


        ]]>
    </CodeTemplate>
</Task>